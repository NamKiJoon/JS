

    조건문 (if문, switch문)
    반복문 
        : 특정한 코드나 행위를 반복해야할 때 사용

        while문
            -조건에 의한 반복

            ex)
                while(조건식){
                    ... 조건식이 true일 동안 반복할 문장
                }

            do ~ while문
                조건식의 결과와 상관없이 한번은 반드시 실행하는 while문

                do {
                    ... 조건식이 true일 동안 반복할 문장
                } while(조건식)


            무한루프(무한반복)
                while(true or 항상 조건이 true인 경우) {
                    ...
                    if(탈출 조건식){
                        ...
                        break;
                    }
                }

        *********** for문 
            반복 횟수가 특정된 경우에 사용
            
            ex)
                for(초기식; 조건식; 증감식){
                    ... 조건식이 ture일 동안 반복할 문장
                }

                    초기식; 조건식; 증감식;
                for(let i=0; i<5; i++){
                    ...
                }
                
                --->
                i = 0; 1번 반복
                i = 1; 2번 반복
                i = 2; 3번 반복
                i = 3; 4번 반복
                i = 4; 5번 반복

                초기식: 변수로 표현 (내부에서 변하는 값을 표현 가능)
                조건식: 반복 수행 될 조건식
                증감식: 매 반복마다 마지막으로 수행할 문장

------------------------------------------------------------------------------------------------

        ** 배열 (Array)
            저장 공간을 나열해놓은 형태의 자료구조
            하나의 이름과 방번호(인덱스)로 참조되는 정렬된 값의 집합

            구성요소
                요소: 배열을 구성하는 각각 데이터의 값
                인덱스: 배열에서 위치를 가리키는 키 값(숫자)

            ex)
                let/const 배열명 = [값1, 값2, 값3 ...]
                let/const 배열명 = new Array(값1, 값2, 값3 ...)


                const 코리아IT빌라 = ['김성용', '..', '..', '바나나', '..', '호녕님']
                코리아IT빌라[0] = '김성용'
                코리아IT빌라[3] = '바나나'
                코리아IT빌라.lenght = 6


            배열의 특징 

            1. 자료형이 고정되어있지 않습니다
            const 코리아IT빌라 = ['김성용', 1, -2.352, true];

            2. 인덱스가 연속적일 필요가 없습니다
            const 코리아IT빌라 = [];
            코리아IT빌라[0] = '김성용'
            코리아IT빌라[3] = '바나나'

            console.log(코리아IT빌라[3]) => 바나나


            * 인덱스가 굳이 숫자가 아니어도 괜찮습니다
            코리아IT[강사님] = '김성용'
            배열의 길이를 파악하기는 힘들지만
            키 값으로 데이터를 찾아올 수 있다


    Array 객체의 기능

            배열명.length   : 현재 이 배열의 총 길이( 가지고 있는 방의 갯수 )
            배열명.push()   : 배열의 맨 끝에 요소를 추가
            배멸명.pop()    : 배열의 맨 끝 값을 제거
            배열명.unshift(): 배열의 맨 처음에 요소를 추가
            배열명.shift()  : 배열의 맨 처음 값을 제거
            배열명.concat() : 두개의 배열을 합친 새로운 배열을 (반환)
            배열명.join()   : 배열 요소 사이에 원하는 문자를 삽입한 문자열을 반환
            배열명.reverse(): 배열 역순 배치
            배열명.sort()   : 배열을 정렬 기본 값은 오름차순
            배열명.slice()  : 배열의 인덱스 값에 따라서 원하는 인덱스 범위의 데이터 (반환)
            ...
            ...
            ..

            * const HELLO = "안녕하세요"
              HELLO.length = 5
              HELLO[3] = 세
              문자열 또한 (문자들의 배열)

              ex)
                 비밀번호 8글자 이상 입력하세요
                 <input type="password" id="user_pw"/>


                 if(docment.getelementById("user_pw").value.length < 8){
                    return alert("비밀번호를 올바르게 입력해주세요")
                 }

                 if(!docment.getelementById("user_pw").value.includes("@")){
                    return alert("이메일 형식을 올바르게 입력해주세요")
                 }

                 // 정규표현식.test() --> 특수문자 포함, 대소문자 포함

------------------------------------------------------------------------------------------------


백엔드에서 전해준 게시판의 데이터 예시
JSON data = 객체


data: {
    posts: [
        {
            postId: 5,
            User: {
                nickname: "김성용"
            }
            content: "오늘 하루는 정말 멋진하루였습니다"
            Comments: [
                {},
                {},
                {},
                {},
            ],
            createdAt: 2022.07.30
        },
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
    ]
}


////
    const posts = response.data.data.posts
    for(let i=0; i<posts.length; i++){
        태그.appendChild(
            `<div id=${posts[i].id}>${posts[i].content}<div>`
        )
    }






